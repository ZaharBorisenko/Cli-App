package handlers

import (
	"fmt"
	"github.com/ZaharBorisenko/Cli-App/models"
	table2 "github.com/aquasecurity/table"
	"os"
	"strconv"
	"time"
)

type TableConfig struct {
	ShowCategory    bool
	ShowCompletedAt bool
	ShowPriority    bool
	ShowStatus      bool
}

func PrintTable(todos []models.Todo, config TableConfig) {
	table := table2.New(os.Stdout)
	table.SetRowLines(false)

	statusManager := StatusManager{} // –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤

	// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	headers := []string{"#", "Title", "Description"}
	if config.ShowCategory {
		headers = append(headers, "Category")
	}
	if config.ShowPriority {
		headers = append(headers, "Priority")
	}
	if config.ShowStatus {
		headers = append(headers, "Status")
	}
	headers = append(headers, "Created at")
	if config.ShowCompletedAt {
		headers = append(headers, "Completed at")
	}

	table.SetHeaders(headers...)

	for id, t := range todos {
		// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
		row := []string{
			strconv.Itoa(id),
			t.Title,
			t.Description,
		}

		if config.ShowCategory {
			row = append(row, t.Category)
		}

		if config.ShowPriority {
			var priorityDisplay string
			switch t.Priority {
			case models.PriorityHigh:
				priorityDisplay = "üî¥ high"
			case models.PriorityMedium:
				priorityDisplay = "üü° medium"
			case models.PriorityLow:
				priorityDisplay = "üü¢ low"
			default:
				priorityDisplay = "‚ö™ none"
			}
			row = append(row, priorityDisplay)
		}

		if config.ShowStatus {
			statusSymbol := statusManager.GetStatusSymbol(t.Status)
			row = append(row, fmt.Sprintf("%s %s", statusSymbol, t.Status))
		}

		row = append(row, t.CreatedAt.Format(time.RFC1123))

		if config.ShowCompletedAt && t.CompletedAt != nil {
			row = append(row, t.CompletedAt.Format(time.RFC1123))
		} else if config.ShowCompletedAt {
			row = append(row, "") // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		}

		table.AddRow(row...)
	}

	table.Render()
}
